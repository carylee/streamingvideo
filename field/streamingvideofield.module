<?php

/**
 * Implementation of hook_help()
 */
//function streamingvideofield_help

/**
 * Implementation of hook_field_info()
 */
function streamingvideofield_field_info() {
  return array(
    'streamingvideofield' => array(
      'label' => 'Streaming Video',
      'description' => t('Store streaming video locations (like rtmp) and embed them in nodes with the Akamai Open Video Player.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings()
 */
function streamingvideofield_field_settings($op, $field) {
  switch ($op) {
    /*case 'form': // It appears I need this case, but I can't find a good explanation of it 1/6
      // taken from lullabot.com/articles/creating-custom-cck-fields
      $form = array();
      $form['max_length'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum length'),
        '#default_value' => is_numeric($field['max_length']) ? $field['max_length'] : 255,
        '#required' => FALSE,

        // Use #element_validate to validate the settings
        '#element_validate' => array('_streamingvideofield_length_validate'),
        '#description' => t('The maximum length of the field in characters. Must be a number between 1 and 255'),
      );
      return $form;

    case 'save':
      return array('max_length');*/

    case 'database columns':
      $columns = array(
        'url' => array(
          'type' => 'varchar', 
          'length' => 64, 
          'not null' => FALSE, 
          'sortable' => TRUE,
          'views' => TRUE,
        ),
      );
      return $columns;
  }
}

function _streamingvideofield_length_validate($element, &$form_state) {
  $value = $form_state['values']['max_length'];
  if( $value && !is_numeric($value) || $value < 1 || $value > 255 ) {
    form_set_error('max_length', t('"Max length" must be a number between 1 and 255.')); // change this
  }
}

/**
 * Implementation of hook_field
 */
/*function streamingvideofield_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    // Do validation on the field values here. The widget
    // will do its own validation and you cannot make any
    // assumptions about what kind of widget has been used,
    // so don't validate widget values, only field values.
    case 'validate':
      if (is_array($items)) {
        foreach ($items as $delta => $item) {
          // The error_element is needed so that CCK can
          // set an error on the right sub-element when
          // fields are deeply nested in the form.
          $error_element = isset($item['_error_element']) ? $item['_error_element'] : '';
          if (is_array($item) && isset($item['_error_element'])) unset($item['_error_element']);
          if (!empty($item['url'])) {
            if (!empty($field['max_length']) && drupal_strlen($item['url']) > $field['max_length']) {
              form_set_error($error_element, t('%name: the value may not be longer than %max characters.', array('%name' => $field['widget']['label'], '%max' => $field['max_length'])));
            }
          }
        }
      }
      return $items;

    // This is where you make sure that user-provided
    // data is sanitized before being displayed.
    case 'sanitize':
      foreach ($items as $delta => $item) {
        $streamingvideofield = check_plain($item['url']);
        $items[$delta]['safe'] = $streamingvideofield;
      }
  }
}*/


/**
 * Implementation of hook_widget_info()
 */
function streamingvideofield_widget_info() {
  return array(
    'streamingvideofield' => array(
      'label' => 'Streaming Video',
      'field types' => array('streamingvideofield'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
      'description' => t('An widget for a streaming video field?'),
    ),
  );
}

function streamingvideofield_elements() {
  return array(
    'streamingvideofield' => array(
      '#input' => TRUE,
      '#columns' => array('url'),
      '#process' => array('streamingvideofield_process'),
    ),
  );
}

/**
 * Implementation of hook_widget()
 */
function streamingvideofield_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

function streamingvideofield_process($element, $edit, $form_state, $form) {
  $element['url'] = array(
    '#type' => 'textfield',
    '#title' => t('Video url'),
    '#default_value' => !empty($element['#value']['url']) ? $element['#value']['url'] : '',
    '#required' => $element['#required'],
  );
  return $element;
}


/**
 * Implementation of hook_content_is_empty()
 */
function streamingvideofield_content_is_empty( $item, $field) {
  return empty($item['url']);
}

/**
 * Implementation of hook_field_formatter_info()
 */
function streamingvideofield_field_formatter_info() {
  require_once(drupal_get_path('module', 'streamingvideo') . '/streamingvideo.inc');
  return array(
    'default' => array(
      'label' => t('Streaming Video URI'),
      'field types' => array('streamingvideofield'),
    ),
  );
}

