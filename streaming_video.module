<?php

/**
* Implementation of hook_node_info()
*/
/*function streaming_video_node_info() {
  return array(
    'streaming_video' => array(
      'name' => t('Streaming video'),
      'module' => 'streaming_video',
      'description' => "Embed a streaming video.",
    )
  );
}*/

/**
* Implementation of hook_perm()
 */
function streaming_video_perm() {
  return array('create streaming_video', 'edit own streaming_video');
}

/**
 * Implementation of hook_init()
 */
function streaming_video_init() {
  $path = drupal_get_path('module', 'streaming_video');
  $path .= "/swfobject/swfobject.js";
  drupal_add_js($path, 'module');
}

/**
 * Implementation of hook_filter()
 */
function streaming_video_filter($op, $delta = 0, $format = -1, $text = '') {
  if ($op == 'list') {
    return array(
      0 => t('Substitute ovp'),
    );
  }

  switch ($delta) {
    case 0:

      switch ($op) {
        case 'description':
          return t('Embeds an open video player');

        case 'prepare':
          return $text;

        case 'process':
          $pattern = '/\[ovp:([A-Za-z:\/0-9._-]*)]/';
          $replacement = "";
          //$replacement = "this is my replacement for the text";
          $num_matches = preg_match( $pattern, $text, $matches );
          $location = $matches[1];

          $embed = streaming_video_header_js( $location );

          $replace_me = "<script type='text/javascript'>$embed</script><div id='myPlayerGoesHere'><a href='http://www.adobe.com/go/getflashplayer'><img src='http://www.adobe.com/images/shared/download_buttons/get_flash_player.gif' alt='Get Adobe Flash player' /></a></div>";
          //drupal_add_js( $embed, 'inline');
          $text = preg_replace($pattern, $replace_me , $text);

        default:
          return $text;

        }
      break;
  }
}

function streaming_video_header_js( $src, $options=NULL ) {
  $player = base_path() . "sites/all/libraries/ovp/AkamaiMultiPlayerExample.swf";
/*  if(!isset($options)) {
    $options = array(
      'autostart' => 'false',
      'themeColor' => '0395d3',
      'mode' => 'sidebyside',
      'scaleMode' => 'fit',
      'frameColor' => '333333',
      'fontColor' => 'cccccc',
      'link' => '',
      'embed' => '',
      'allowFullScreen' => 'true',
      'id' => 'myPlayer',
      'name' => 'myPlayer',
      'width' => '640',
      'height' => '480',
    );
}*/
  // Load the variables
  $width = variable_get('streaming_video_width', 640);
  $height = variable_get('streaming_video_height', 480);
  $autostart_value = variable_get('streaming_video_autostart', 'false');
  if( $autostart_value == 1 ) $autostart = false;
  else $autostart = true;
  $mode = variable_get('streaming_video_mode', 'sidebyside');
  $themecolor = variable_get('streaming_video_themecolor', '0395d3');

  $src_encoded = urlencode($src);

  $embed = "
    var flashvars = { 
      src: \"$src_encoded\", 
      autostart: \"false\", 
      themeColor: \"0395d3\", 
      mode: \"sidebyside\", 
      scaleMode: \"fit\" 
    }; 
    var params = {}; 
      var attributes = { 
      id: \"myPlayer\", 
      name: \"myPlayer\", 
      allowFullScreen: \"true\" 
    }; 
    swfobject.embedSWF(\"$player\", 'myPlayerGoesHere', '640', '$height', '9.0.0', 'expressInstall.swf', flashvars, params, attributes);";

  return $embed;
}

function streaming_video_admin() {
  $form = array();

  $form['streaming_video_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width of player'),
    '#default_value' => variable_get('streaming_video_width', 640),
    '#size' => 3,
    '#description' => t("The width of the player in pixels"),
    '#required' => TRUE,
  );

  $form['streaming_video_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height of player'),
    '#default_value' => variable_get('streaming_video_height', 480),
    '#size' => 3,
    '#description' => t("The height of the player in pixels"),
    '#required' => TRUE,
  );

  $form['streaming_video_autostart'] = array(
    '#type' => 'radios',
    '#title' => t('Autostart video?'),
    '#default_value' => variable_get('streaming_video_autostart', 1),
    '#options' => array( t('Yes'), t('No') ),
  );

  return system_settings_form($form);
}

function streaming_video_admin_validate($form, &$form_state) {
  $width = $form_state['values']['streaming_video_width'];
  if (!is_numeric($width)) {
    form_set_error('streaming_video_width', t('You must enter an integer for the player width.') );
  }
  else if ($width <= 0) {
    form_set_error('streaming_video_width', t('Player width must be positive.'));
  }
  $height = $form_state['values']['streaming_video_height'];
  if (!is_numeric($height)) {
    form_set_error('streaming_video_height', t('You must enter an integer for the player height.') );
  }
  else if ($height <= 0) {
    form_set_error('streaming_video_height', t('Player height must be positive.'));
  }
}


/**
 * Implementation of hook_menu();
 */
function streaming_video_menu() {

  $items = array();

  $items['admin/settings/streaming_video'] = array(
    'title' => 'Streaming video settings',
    'description' => 'Change the settings of the default OVP player',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('streaming_video_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}
